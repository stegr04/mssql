---
#
# Install SQL Developer Edition
#

# Load required powershell modules
- name: Powershell | Check for SQLServer DSC Powershell module
  win_psmodule:
    name: SQLServerDsc
    state: present

- name: Powershell | Check for Storage DSC Powershell module
  win_psmodule:
    name: StorageDsc
    state: present

- name: Powershell | Check for ServerManager Powershell module
  win_psmodule:
    name: ServerManager
    state: present

- name: Powershell | Ensure that DBA Tools module is present
  win_psmodule:
    name: dbatools
    state: present

- name: Powershell | Check for xNetworking Powershell module
  win_psmodule:
    name: xNetworking
    state: present

- name: Windows | Install .NET Framework Core
  win_feature:
    name: NET-Framework-Core
    state: present

# Setup SQL Server Pre-Reqs
- name: Windows | Install .NET Framework 3.5
  win_feature:
    name: NET-Framework-Features
    state: present

- name: Windows | Install .NET Framework 4.5 Features
  win_feature:
    name: NET-Framework-45-Features
    state: present
    include_sub_features: True

- name: Windows | Install Windows Process Activation Service
  win_feature:
    name: WAS
    state: present
    include_sub_features: True

- name: Setup service accounts
  include_tasks: "{{ mssql_service_acct_type }}_users.yml"

# SQL install may fail if a pending reboot is detected
# Assuming we are allowed to reboot this step will check for pending reboots
# and execute a reboot, reboot activity can be controlled using the variable mssql_suppress_reboot

- name: Ensure that a reboot is not pending
  when: ansible_reboot_pending
  debug:
    msg: 'Pending reboot detected'
  changed_when: true
  notify: reboot windows

- meta: flush_handlers

# win_get_url will fail if the mssql_temp_download_path directory does not exist.
- name: create the temp_download_path if it doesn't exist
  win_file:
    path: "{{ mssql_temp_download_path }}"
    state: directory

- name: Get installation media
  include_tasks: "{{ mssql_media_type }}_download.yml"
  
# The iso_vars.yml depends on a registered variable that is registered in during the Get install Media task.
- name: Get SourcePath variable.
  include_vars: "{{ mssql_media_type }}_vars.yml"
  
- name: Run SQL Server Installation
  include_tasks: "{{ mssql_security_mode }}_install.yml"


# Firewall configuration
- name: Firewall | Allow Database Engine for instance
  win_dsc:
    resource_name: xFirewall
    Name: "SQL Server Database Engine instance {{ mssql_instance_name }}"
    Program: sqlservr.exe 
    Ensure: present
    Enabled: True
    Profile: "Domain"
    Direction: "Inbound"
    Action: Allow
    Description: "Allows the Database Engine to access the network"  
  tags: configure_firewall

- name: Firewall | Allow SQLBrowser for instance
  win_dsc:
    resource_name: xFirewall
    Name: "SQL Server Browser instance {{ mssql_instance_name }}"
    Service: SQLBrowser
    Ensure: present
    Enabled: True
    Profile: "Domain"
    Direction: "Inbound"
    Action: Allow
    Description: "Allows the SQL Server Browser to access the network"  
  tags: configure_firewall

# Begin SQL Server configuration
- name: Enable TCP Connectivity
  win_dsc:
    resource_name: SqlServerNetwork
    InstanceName: "{{ mssql_instance_name }}"
    ProtocolName: tcp
    TcpPort: "{{ mssql_port }}"
    IsEnabled: True
    RestartService: True
  tags: configure_sql

- name: Adjust Max Server Memory to {{ mssql_max_server_memory }}
  when: mssql_max_server_memory is defined
  win_dsc:
    resource_name: SqlServerConfiguration 
    InstanceName: "{{ mssql_instance_name }}"
    ServerName: "{{ ansible_hostname }}"
    OptionName: max server memory (MB)
    OptionValue: "{{ mssql_max_server_memory }}"
    RestartService: False
  tags: configure_sql

- name: Adjust Min Server Memory to {{ mssql_min_server_memory }}
  when: mssql_min_server_memory is defined
  win_dsc:
    resource_name: SqlServerConfiguration 
    ServerName: "{{ ansible_hostname }}"
    InstanceName: "{{ mssql_instance_name }}"
    OptionName: min server memory (MB)
    OptionValue: "{{ mssql_min_server_memory }}"
  tags: configure_sql

- name: Adjust Max Degree of Parallelism
  when: mssql_max_degree_of_parallelism is defined
  win_dsc:
    resource_name: SqlServerConfiguration 
    ServerName: "{{ ansible_hostname }}"
    InstanceName: "{{ mssql_instance_name }}"
    OptionName: max degree of parallelism
    OptionValue: "{{ mssql_max_degree_of_parallelism }}"
  tags: configure_sql
